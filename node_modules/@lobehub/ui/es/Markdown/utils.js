export function escapeBrackets(text) {
  var pattern = /(```[\S\s]*?```|`.*?`)|\\\[([\S\s]*?[^\\])\\]|\\\((.*?)\\\)/g;
  return text.replaceAll(pattern, function (match, codeBlock, squareBracket, roundBracket) {
    if (codeBlock) {
      return codeBlock;
    } else if (squareBracket) {
      return "$$".concat(squareBracket, "$$");
    } else if (roundBracket) {
      return "$".concat(roundBracket, "$");
    }
    return match;
  });
}
export function escapeMhchem(text) {
  return text.replaceAll('$\\ce{', '$\\\\ce{').replaceAll('$\\pu{', '$\\\\pu{');
}
export function fixMarkdownBold(text) {
  var count = 0;
  var count2 = 0;
  var result = '';
  for (var i = 0; i < text.length; i++) {
    var char = text[i];
    if (char === '*') {
      count++;
      if (count === 2) {
        count2++;
      }
      if (count > 2) {
        result += char;
        continue;
      }
      if (count === 2 && count2 % 2 === 0) {
        var prevChar = i > 0 ? text[i - 2] : '';
        var isPrevCharAlphanumeric = /[\dA-Za-z]/.test(prevChar);
        result += i + 1 < text.length && text[i + 1] !== ' ' && !isPrevCharAlphanumeric ? '* ' : '*';
      } else {
        result += '*';
      }
    } else {
      result += char;
      count = 0;
    }
  }
  return result;
}