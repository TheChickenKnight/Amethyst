import _regeneratorRuntime from "@babel/runtime/helpers/esm/regeneratorRuntime";
import _asyncToGenerator from "@babel/runtime/helpers/esm/asyncToGenerator";
import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import { useTheme } from 'antd-style';
import mermaid from 'mermaid';
import { useCallback, useEffect, useState } from 'react';
import { jsx as _jsx } from "react/jsx-runtime";
export var useMermaid = function useMermaid(content) {
  var _useState = useState(),
    _useState2 = _slicedToArray(_useState, 2),
    mermaidContent = _useState2[0],
    setMermaidContent = _useState2[1];
  var theme = useTheme();
  useEffect(function () {
    mermaid.initialize({
      fontFamily: theme.fontFamilyCode,
      securityLevel: 'loose',
      startOnLoad: true,
      theme: 'base',
      themeVariables: {
        errorBkgColor: theme.colorError,
        errorTextColor: theme.colorText,
        fontSize: 14,
        lineColor: theme.colorBorderSecondary,
        primaryBorderColor: theme.colorPrimaryBorder,
        primaryColor: theme.colorPrimaryBg,
        primaryTextColor: theme.colorText,
        secondaryColor: theme.colorInfo,
        tertiaryColor: theme.colorSuccess
      }
    });
    mermaid.contentLoaded();
  }, [mermaidContent, theme.isDarkMode]);
  var checkSyntax = /*#__PURE__*/function () {
    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(textStr) {
      return _regeneratorRuntime().wrap(function _callee$(_context) {
        while (1) switch (_context.prev = _context.next) {
          case 0:
            _context.prev = 0;
            _context.next = 3;
            return mermaid.parse(textStr);
          case 3:
            if (!_context.sent) {
              _context.next = 5;
              break;
            }
            setMermaidContent(textStr);
          case 5:
            _context.next = 9;
            break;
          case 7:
            _context.prev = 7;
            _context.t0 = _context["catch"](0);
          case 9:
          case "end":
            return _context.stop();
        }
      }, _callee, null, [[0, 7]]);
    }));
    return function checkSyntax(_x) {
      return _ref.apply(this, arguments);
    };
  }();
  useEffect(function () {
    checkSyntax(content);
  }, [content]);
  return useCallback(function () {
    return /*#__PURE__*/_jsx("pre", {
      className: 'mermaid',
      style: {
        alignItems: 'center',
        display: 'flex',
        fontSize: 14,
        justifyContent: 'center',
        overflow: 'auto'
      },
      children: mermaidContent
    });
  }, [mermaidContent, theme.isDarkMode]);
};