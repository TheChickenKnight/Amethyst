'use client';

import _objectSpread from "@babel/runtime/helpers/esm/objectSpread2";
import _toConsumableArray from "@babel/runtime/helpers/esm/toConsumableArray";
import _regeneratorRuntime from "@babel/runtime/helpers/esm/regeneratorRuntime";
import _asyncToGenerator from "@babel/runtime/helpers/esm/asyncToGenerator";
import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
var _excluded = ["value", "defaultAvatar", "backgroundColor", "onChange", "locale", "allowUpload", "allowDelete", "texts", "onDelete", "compressSize", "customEmojis", "loading", "size", "onClick", "onUpload", "className", "customTabs", "popupClassName", "popupStyle"];
import data from '@emoji-mart/data';
import Picker from '@emoji-mart/react';
import { Popover } from 'antd';
import { Loader2Icon, SmileIcon, TrashIcon, UploadIcon } from 'lucide-react';
import { memo, useEffect, useRef, useState } from 'react';
import { Center, Flexbox } from 'react-layout-kit';
import useSWR from 'swr';
import useMergeState from 'use-merge-value';
import ActionIcon from "../ActionIcon";
import Avatar from "../Avatar";
import Icon from "../Icon";
import TabsNav from "../TabsNav";
import Tooltip from "../Tooltip";
import AvatarUploader from "./AvatarUploader";
import { useStyles } from "./style";
import { jsx as _jsx } from "react/jsx-runtime";
import { jsxs as _jsxs } from "react/jsx-runtime";
var DEFAULT_AVATAR = 'ðŸ¤–';
var EmojiPicker = /*#__PURE__*/memo(function (_ref) {
  var value = _ref.value,
    _ref$defaultAvatar = _ref.defaultAvatar,
    defaultAvatar = _ref$defaultAvatar === void 0 ? DEFAULT_AVATAR : _ref$defaultAvatar,
    _ref$backgroundColor = _ref.backgroundColor,
    backgroundColor = _ref$backgroundColor === void 0 ? 'rgba(0,0,0,0)' : _ref$backgroundColor,
    onChange = _ref.onChange,
    _ref$locale = _ref.locale,
    locale = _ref$locale === void 0 ? 'en-US' : _ref$locale,
    allowUpload = _ref.allowUpload,
    allowDelete = _ref.allowDelete,
    texts = _ref.texts,
    onDelete = _ref.onDelete,
    _ref$compressSize = _ref.compressSize,
    compressSize = _ref$compressSize === void 0 ? 256 : _ref$compressSize,
    customEmojis = _ref.customEmojis,
    loading = _ref.loading,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? 44 : _ref$size,
    _onClick = _ref.onClick,
    onUpload = _ref.onUpload,
    className = _ref.className,
    _ref$customTabs = _ref.customTabs,
    customTabs = _ref$customTabs === void 0 ? [] : _ref$customTabs,
    popupClassName = _ref.popupClassName,
    popupStyle = _ref.popupStyle,
    rest = _objectWithoutProperties(_ref, _excluded);
  var ref = useRef(null);
  var _useState = useState(false),
    _useState2 = _slicedToArray(_useState, 2),
    active = _useState2[0],
    setActive = _useState2[1];
  var _useState3 = useState('emoji'),
    _useState4 = _slicedToArray(_useState3, 2),
    tab = _useState4[0],
    setTab = _useState4[1];
  var _useState5 = useState(false),
    _useState6 = _slicedToArray(_useState5, 2),
    open = _useState6[0],
    setOpen = _useState6[1];
  var _useStyles = useStyles(),
    cx = _useStyles.cx,
    styles = _useStyles.styles,
    theme = _useStyles.theme;
  var _useSWR = useSWR(locale, /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
      return _regeneratorRuntime().wrap(function _callee$(_context) {
        while (1) switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return import("@emoji-mart/data/i18n/".concat(locale.split('-')[0], ".json"));
          case 2:
            return _context.abrupt("return", _context.sent);
          case 3:
          case "end":
            return _context.stop();
        }
      }, _callee);
    })), {
      revalidateOnFocus: false
    }),
    i18n = _useSWR.data;
  var _useMergeState = useMergeState(defaultAvatar, {
      defaultValue: defaultAvatar,
      onChange: onChange,
      value: value
    }),
    _useMergeState2 = _slicedToArray(_useMergeState, 2),
    ava = _useMergeState2[0],
    setAva = _useMergeState2[1];
  var handleClickOutside = function handleClickOutside(e) {
    if (!ref.current) return;
    if (open && !active && e.target !== ref.current) {
      setOpen(false);
    }
  };
  var handleAvatarChange = function handleAvatarChange(emoji) {
    setAva(emoji);
    setOpen(false);
  };
  useEffect(function () {
    document.addEventListener('click', handleClickOutside);
    return function () {
      return document.removeEventListener('click', handleClickOutside);
    };
  }, [active, open]);
  var items = [{
    key: 'emoji',
    label: /*#__PURE__*/_jsx(Tooltip, {
      title: (texts === null || texts === void 0 ? void 0 : texts.emoji) || 'Emoji',
      children: /*#__PURE__*/_jsx(Icon, {
        icon: SmileIcon,
        size: {
          fontSize: 20,
          strokeWidth: 2.5
        }
      })
    })
  }, allowUpload && {
    key: 'upload',
    label: /*#__PURE__*/_jsx(Tooltip, {
      title: (texts === null || texts === void 0 ? void 0 : texts.upload) || 'Upload',
      children: /*#__PURE__*/_jsx(Icon, {
        icon: UploadIcon,
        size: {
          fontSize: 20,
          strokeWidth: 2.5
        }
      })
    })
  }].concat(_toConsumableArray(customTabs.map(function (tab) {
    return {
      key: tab.value,
      label: tab.label
    };
  }))).filter(Boolean);
  var showTabs = items && items.length > 1;
  return /*#__PURE__*/_jsx(Popover, {
    arrow: false,
    content: /*#__PURE__*/_jsxs(Flexbox, {
      className: cx(styles.picker, popupClassName),
      onMouseEnter: function onMouseEnter() {
        return setActive(true);
      },
      onMouseLeave: function onMouseLeave() {
        return setActive(false);
      },
      ref: ref,
      style: _objectSpread({
        minWidth: 310,
        paddingTop: showTabs ? 4 : 0
      }, popupStyle),
      children: [showTabs && /*#__PURE__*/_jsxs(Flexbox, {
        align: 'center',
        horizontal: true,
        justify: 'space-between',
        paddingInline: 10,
        children: [/*#__PURE__*/_jsx(TabsNav, {
          activeKey: tab,
          items: items,
          onChange: function onChange(key) {
            return setTab(key);
          },
          variant: 'compact'
        }), allowDelete && /*#__PURE__*/_jsx(ActionIcon, {
          icon: TrashIcon,
          onClick: function onClick() {
            handleAvatarChange(defaultAvatar);
            onDelete === null || onDelete === void 0 || onDelete();
          },
          size: {
            fontSize: 20,
            strokeWidth: 2.5
          },
          title: (texts === null || texts === void 0 ? void 0 : texts.delete) || 'Delete'
        })]
      }), tab === 'emoji' && /*#__PURE__*/_jsx(Picker, {
        custom: customEmojis,
        data: data,
        i18n: i18n,
        icons: 'outline',
        locale: locale.split('-')[0],
        navPosition: showTabs ? 'bottom' : 'top',
        onEmojiSelect: function onEmojiSelect(e) {
          return handleAvatarChange(e.src || e.native);
        },
        previewPosition: 'none',
        skinTonePosition: 'none',
        theme: theme.isDarkMode ? 'dark' : 'light'
      }), tab === 'upload' && /*#__PURE__*/_jsx(AvatarUploader, {
        compressSize: compressSize,
        onChange: handleAvatarChange,
        onUpload: onUpload,
        texts: texts
      }), customTabs.map(function (item) {
        return tab === item.value && /*#__PURE__*/_jsx(Flexbox, {
          padding: 10,
          children: item.render(handleAvatarChange)
        }, item.value);
      })]
    }),
    destroyTooltipOnHide: true,
    open: open,
    placement: 'bottomLeft',
    rootClassName: styles.popover,
    trigger: ['click'],
    children: /*#__PURE__*/_jsxs(Center, _objectSpread(_objectSpread({
      className: cx(styles.avatar, className),
      flex: 'none',
      height: size,
      onClick: function onClick(e) {
        if (loading) return;
        setOpen(!open);
        _onClick === null || _onClick === void 0 || _onClick(e);
      },
      onMouseEnter: function onMouseEnter() {
        return setActive(true);
      },
      onMouseLeave: function onMouseLeave() {
        return setActive(false);
      },
      width: size
    }, rest), {}, {
      children: [loading && /*#__PURE__*/_jsx(Center, {
        className: styles.loading,
        height: '100%',
        width: '100%',
        children: /*#__PURE__*/_jsx(Icon, {
          icon: Loader2Icon,
          size: {
            fontSize: size / 2
          },
          spin: true
        })
      }), /*#__PURE__*/_jsx(Avatar, {
        avatar: ava,
        background: backgroundColor,
        size: size
      })]
    }))
  });
});
export default EmojiPicker;